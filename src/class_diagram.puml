@startuml
skinparam linetype ortho
left to right direction
skinparam nodesep 30
title: FerryTix Class Diagram

abstract class PaymentMethod

class FaehrCardPayment {
    uuid: UUID
}
FaehrCardPayment .|> PaymentMethod
FaehrCardPayment -left-> FaehrCard

class CashPayment {
    denominations: [Integer]
    change: [Integer]
}

CashPayment ..|> PaymentMethod

class ECCardPayment {

}

ECCardPayment .|> PaymentMethod

class BankTransferPayment {

}

BankTransferPayment .up|> PaymentMethod

class PayPalPayment {

}

PayPalPayment ..|> PaymentMethod

class Payment {
    issuedBy: Union<null, VendingMachine>
    issuedAt: DateTime
    paymentNumber: Integer
    amount: Integer
    method: PaymentMethod
}

Payment -> PaymentMethod
Payment -> VendingMachine

class TicketSale {
    returnValid: Boolean
    from: MachineLocation
    positions: [Position]
}

class Position {
    fare: Fare
    count: Integer
}

Position -> Fare
Position <-TicketSale

TicketSale -left-> Payment


class TicketClass {
    bicycle: Boolean
    return: Boolean
    reduced: Boolean
    staff: Boolean
}

abstract class Sale {
    saleID: String
    signedBy: VendingMachine
    signature: String
    payment: Payment

}

TicketSale .left.|> Sale
TopUp .up|> Sale
Sale -> Payment
Sale -> VendingMachine

class TopUp {
    for: FaehrCard
    amount: Integer
    initial: Boolean
}

TopUp--> Payment
FaehrCard <-- TopUp

class StaffMember {
    uuid: UUID
    firstName: String
    lastName: String
    role: StaffRole
}

StaffMember -up> StaffRole

enum StaffRole {
    Admin
    Captain
    Cashier
    other
}

class FaehrCard {
    uuid: UUID
    ownedBy: Union<null, StaffMember>
    balance: Integer
    issuedAt: DateTime
    issuedBy: Union<null, VendingMachine>
}

FaehrCard -up> StaffMember
FaehrCard--> VendingMachine

class MachineConfiguration {
    forMachine: VendingMachine
    maxBicycles: Integer
    maxBicyclesTolerance: Integer
    maxPassengers: Integer
    maxPassengersTolerance: Integer
    fares: [Fare]
}

MachineConfiguration -> VendingMachine
MachineConfiguration -up> Fare

class Fare {
    ticketClass: TicketClass
    fare: Integer
}

TicketClass <-- Fare

' enum MachineCommand {
'     setSignalRed
'     setSignalGreen
'     stopVending
'     startVending
' }

enum MachineLocation {
    Bislich
    Xanten
}

class VendingMachine {
    machineNumber: Integer
    publicKey: PublicKey
    location: MachineLocation
}

MachineLocation --> VendingMachine

class MachineStatus {
    vending: Boolean
    waiting: [WaitingPassenger]
}

WaitingPassenger <- MachineStatus

class WaitingPassenger {
    ticketClass: TicketClass
    waitingSince: DateTime
}

WaitingPassenger --> TicketClass

@enduml