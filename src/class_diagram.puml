@startuml
skinparam linetype ortho
left to right direction
skinparam nodesep 30
'title: FerryTix Class Diagram
skinparam monochrome true

abstract class PaymentDetails
'skinparam BoxPadding             30
skinparam nodesep 50
skinparam ranksep 100

class FaehrCardPayment {
    ' uuid: UUID
}
FaehrCardPayment ..|> PaymentDetails
FaehrCardPayment "*" -up  "1" FaehrCard

class CashPayment {
    denominations: [Integer]
    change: [Integer]
}

PaymentDetails <|.. CashPayment

class ECCardPayment {

}

PaymentDetails <|.. ECCardPayment

class Payment {
    'issuedBy: Union<null, VendingMachine>
    uuid: UUID
    issuedAt: DateTime
    amount: Integer
    'details: PaymentDetails
    'method: PaymentMethod
}

enum PaymentMethod {
    ECCard
    Cash
    FaehrCard
}

PaymentMethod "1" -- "*" Payment
Payment "1" - "1" PaymentDetails
Payment "*" - "1" VendingMachine

class TicketSale {
    returnValid: Boolean
    ' from: MachineLocation
    'positions: [Position]
}

class Position {
    ' fare: Fare
    count: Integer
}

Position "1" -- "1" Fare
Position "1…*" - "1" TicketSale

' TicketSale "1" -- "1" Payment

class TicketClass {
    bicycle: Boolean
    return: Boolean
    reduced: Boolean
    staff: Boolean
}

abstract class Sale {
    saleID: String
    'signedBy: VendingMachine
    signature: String
    'payment: Payment
}

TicketSale ..|> Sale
TopUp ..|> Sale
Sale "1" - "1" Payment
Sale "*" -- "1" VendingMachine

class TopUp {
    'for: FaehrCard
    amount: Integer
    initial: Boolean
}

'TopUp "1" -- "1" Payment
FaehrCard "1" - "1…*" TopUp

class StaffMember {
    uuid: UUID
    firstName: String
    lastName: String
    'role: StaffRole
}

StaffMember "*" -up "1" StaffRole

enum StaffRole {
    Admin
    Captain
    Cashier
    other
}

class FaehrCard {
    uuid: UUID
    ' ownedBy: Union<null, StaffMember>
    balance: Integer
    issuedAt: DateTime
    ' issuedBy: Union<null, VendingMachine>
}

FaehrCard "0…1" -up "0…1" StaffMember
FaehrCard "*" -- "0…1" VendingMachine

class MachineConfiguration {
    'forMachine: VendingMachine
    maxBicycles: Integer
    maxBicyclesTolerance: Integer
    maxPassengers: Integer
    maxPassengersTolerance: Integer
    'fares: [Fare]
}

MachineConfiguration "1" - "1…*" VendingMachine
MachineConfiguration "*" -up "*" Fare

class Fare {
    ' ticketClass: TicketClass
    fare: Integer
}

TicketClass "1" - "1" Fare

' enum MachineCommand {
'     setSignalRed
'     setSignalGreen
'     stopVending
'     startVending
' }

enum MachineLocation {
    Bislich
    Xanten
}

class VendingMachine {
    uuid: UUID
    publicKey: PublicKey
    'location: MachineLocation
}

MachineLocation "1" -up "*" VendingMachine

MachineLocation "1" -- "*" VendingMachine

class MachineStatus {
    vending: Boolean
    ' waiting: [WaitingPassenger]
    batteryCharge: float
    estimatedReceiptPaperFillLevel: float
    receiptPaperRollLength: float
    cpuTemperature: float
    'ticketsSoldToday:
    volumeOfSalesToday: integer
    saleCounter: integer
}

WaitingPassenger "*" - "1" MachineStatus

class WaitingPassenger {
    ticketClass: TicketClass
    waitingSince: DateTime
}

WaitingPassenger "*" -- "1" TicketClass

VendingMachine "1" - "1" MachineStatus

@enduml